#
# ***** Initialization *****
# This is an example command dictionary configuration. Mind you, this is an
# example configuration meant to convey the structure of the configuration
# file. It will probably not work as is in your environment. 
# So, copy this file to "commands.yaml". Then modify and adjust 
# "commands.yaml" to suit your needs. E.g. On Linux you would do

# $ cp commands.yaml.example commands.yaml
# $ nano commands.yaml # adjust to your needs, especially the paths!


# ***** Paths *****

# The bot needs to find your commands. For that the bot uses the PATH 
# variable. By adjusting the "paths" values below you can add additional
# paths to the system PATH variable. If the bot is using commands that
# are not already on the system PATH, you must add the additional command
# paths below. 
# Furthermore, make sure the bot has read and execute access
# to the commands, otherwise they won't work.
# Here we show two example command paths. Adjust them as needed.
paths:
  - /home/bd/code/matrix-eno-bot/eno/scripts


# ***** Commands *****

# Commands are a list of specifications for your bot commands.
# The children of the "commands" key are the command names. 
# Command names are nick names like "alert" or "backup". 
# Each command, listed by its name, has the following 
# keys (or properties):
#
#   cmd:               string: name of the command, executable, or script.
#                      The bot will attempt to execute this command when
#                      triggered. The bot will call this "cmd" and pass 
#                      the given arguments to it.
#                      Example: "date" (a command provided by the OS)
#   help:              string: help string explaining the command.
#                      This is useful when you forget how use the command.
#                      The help string provided will be listed and shown with
#                      the 'help' command of the bot.
#                      Example: "returns the current date of the server"
#   regex:             string: regex pattern whose matches are valid ways to call the 
#                      command.
#                      If a bot message matches a regular expression, then the
#                      corresponding command will be executed. 
#                      If a bot message matched multiple regular expressions, 
#                      only the first matching command will be executed!
#                      It is recommended that the regular expressions are used
#                      such that they are mutually exclusive to avoid
#                      situation where one messages matches multiple regular
#                      expressions.
#                      When the "regex" matches the "cmd" will be triggered.
#                      Example: "^date$" (only the exact string of "date"
#                      will match) 
#   markdown_convert:  true or false: Specifies whether the message reply has
#                      been formatted in markdown.
#                      The bot will convert this markdown-formatted input
#                      and convert it into an HTML-like format understood by
#                      Matrix, so that the bot reply shows up visually as
#                      nice as the markdown input.
#                      Defaults to true.
#                      Example: Your command output is a markdown formatted
#                      string such as "I *really* like it!" Set 
#                      markdown_convert to true and the receiver gets the
#                      text "I really like it!" with the word "really"
#                      visually in italic. In short, use "true", whenever
#                      your command output is a markdown-formatted string;
#                      false otherwise.
#   formatted:         true or false: Specifies whether message reply will
#                      be sent as a formatted message.
#                      Defaults to true.
#   code:              true or false: Specifies whether message reply will
#                      be formatted as a code block with fixed-size font.
#                      If set to "true", "markdown_convert" will be ignored.
#                      Defaults to false.
#   split:             string: if this string is set, splits the message reply
#                      into multiple messages wherever the string specified in
#                      split occurs.
#                      Defaults to None, no message splitting by default.
#                      Example: "\n\n\n" (Wherever the command output contains 
#                      two empty lines, the output will be split. Each piece
#                      will be sent as a separate reply message.
commands:

  # There are 3 kinds of commands.
  # a) built-in commands
  # b) pre-packed commands provided by the matrix-eno-bot repo
  # c) your custom commands that you can add
  #    To add your custom commands go to the end of file, you will
  #    find a "Custom commands" header there. Add them there.

  # Built-in commands
  # ---------------
  # help : "help" is a reserved word, so don't use it as a custom command!
  # reload : "reload" is a reserved word, so don't use it as a custom command!


  # Pre-packed commands provided by the matrix-eno-bot repo
  # -------------------------------------------------------

  # alert if too many resources are used, best to use with cron
  alert:
    regex:             "alert$|^alert .*$|^alarm$|^alarm .*|^alert.sh$"
    cmd:               alert.sh
    help:              shows if any CPU, RAM, or disk thresholds have been exceeded
    markdown_convert:  false
    formatted:         true
    code:              true
  # CPU temperature, to monitor the CPU temperatures
  cputemp:
    regex:             "^cpu$|^temp$|^temperature$|^celsius$|^cputemp.*$|^hot$|^chaud$"
    cmd:               cputemp.sh
    help:              give the current CPU temperatures
    markdown_convert:  false
    formatted:         true
    code:              false
  # get date and time
  datetime:
    regex:             "^date$|^time$|^tiempo$|^hora$|^temps$|^heure$|^heures$|^datum$|^zeit$|^datetime.sh$"
    cmd:               datetime.sh
    help:              give current date and time of server
    markdown_convert:  false
    formatted:         true
    code:              true
  # disk space, monitor disk space
  disks:
    regex:             "^disks$|^disk$|^full$|^space$|^disks.sh$"
    cmd:               disks.sh
    help:              see how full your disks or mountpoints are
    markdown_convert:  false
    formatted:         true
    code:              true
  # echo, trivial example to have the bot respond
  echo:
    regex:             "^echo$|^echo .*"
    cmd:               echo.py
    help:              bot echoes back your input
    markdown_convert:  false
    formatted:         true
    code:              false
  # get a compliment, hello
  hello:
    regex:             "^salut$|^ciao$|^hallo$|^hi$|^servus$|^hola$|^hello$|^hello .*$|^bonjour$|^bonne nuit$|^hello.sh$"
    cmd:               hello.sh
    help:              gives you a friendly compliment
    markdown_convert:  false
    formatted:         true
    code:              false
  # platform info
  platforminfo:
    regex:             "^platform$|^platform .*|^platforminfo.py$"
    cmd:               platforminfo.py
    help:              give hardware and operating system platform information
  # ps, host status
  ps:
    regex:             "^ps$|^ps .*|^ps.sh$"
    cmd:               ps.sh
    help:              print current CPU, RAM and Disk utilization of server
    markdown_convert:  false
    formatted:         true
    code:              true
  # restart, reset
  restart:
    regex:             "^restart$|^reset$|^restart .*$|^reset .*$|^restart.sh$|^restart.sh .*"
    cmd:               restart.sh
    help:              restart the bot itself, or Matrix services
    markdown_convert:  false
    formatted:         true
    code:              false
  # whoami
  whoami:
    regex:             "^w$|^who$|^whoami$"
    cmd:               whoami.py
    help:              return information about the user, whose unix account is running the bot
    markdown_convert:  false
    formatted:         true
    code:              false
  python:
    regex:             "^python$|^python .*"
    cmd:               python_code_execution.py
    help:              return if valid python-code was entered, Gazbock
    markdown_convert:  false
    formatted:         true
    code:              false 
  # Custom commands
  # ---------------

  # add your custom commands here
  
# End of commands configuration file
